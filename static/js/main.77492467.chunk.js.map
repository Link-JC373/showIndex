{"version":3,"sources":["store/actionTypes.ts","route/pageLodable.tsx","route/index.tsx","App.tsx","store/reducers/index.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["INCREMENT","DECREMENT","LOGIN","LOGOUT","loadingComponent","LoadingOutlined","id","className","loader","loading","Loadable","Blog","ArticleDetail","AuthorDetail","AddArticle","Favorites","SystemData","UserController","ArticleController","router","path","exact","render","to","component","children","renderRoutes","App","rootReducer","combineReducers","countReducer","state","action","type","loginReducer","userId","userIcon","username","userInfo","store","createStore","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAA,wIACO,IAAMA,EAAY,YAIZC,EAAY,YAIZC,EAAQ,QAIRC,EAAS,U,6OCNhBC,G,MAAmB,WACJC,EAAA,EACjB,OAOI,yBAAKC,GAAG,kBACJ,yBAAKA,GAAG,WACR,yBAAKC,UAAU,gCACf,yBAAKA,UAAU,iCACf,yBAAKA,UAAU,cAAf,sBAA+C,6BAAM,0CAWlD,WAACC,GAA6C,IAAhCC,EAA+B,uDAArBL,EACnC,OAAOM,IAAS,CACZF,SACAC,aCvBFE,EAAOD,GAAS,kBAAM,6EACtBE,EAAgBF,GAAS,kBAAM,4EAC/BG,EAAeH,GAAS,kBAAM,4EAC9BI,EAAaJ,GAAS,kBAAM,6EAC5BK,EAAYL,GAAS,kBAAM,6EAE3BM,EAAaN,GAAS,kBAAM,sEAC5BO,EAAiBP,GAAS,kBAAM,6EAChCQ,EAAoBR,GAAS,kBAAM,6EAGnCS,EAAwB,CAC1B,CACIC,KAAM,IACNC,OAAO,EACPC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,YAE/B,CACIH,KAAM,QACNI,UAAWb,GAGf,CACIS,KAAM,qBACNI,UAAWZ,GAEf,CACIQ,KAAM,cACNI,UAAWV,GAEf,CACIM,KAAM,iBACNI,UAAWT,GAEf,CACIK,KAAM,oBACNI,UAAWX,GASf,CACIO,KAAM,SAENI,UAvCMd,GAAS,kBAAM,gEAwCrBe,SAAU,CACN,CACIL,KAAM,oBACNI,UAAWR,GAEf,CACII,KAAM,wBACNI,UAAWP,GAEf,CACIG,KAAM,2BACNI,UAAWN,KAIvB,CACIE,KAAM,cACNI,UAxDWd,GAAS,kBAAM,+EA2DnBgB,cAAaP,GC/DbQ,EATH,WAEV,OACE,kBAAC,IAAD,KACGR,I,uBC+BQS,EAJKC,0BAAgB,CAClCC,aAlCU,WAA8C,IAA7CC,EAA4C,uDAApC,EAAGC,EAAiC,uCACrD,OAAQA,EAAOC,MACb,KAAKjC,IACH,OAAO+B,EAAQ,EACjB,KAAK9B,IACH,OAAO8B,EAAQ,EACjB,QACE,OAAOA,IA4BbG,aAxBY,WAM4B,IALxCH,EAKuC,uDAL/B,CACFI,OAAQ,EACRC,SAAU,GACVC,SAAW,IAEfL,EAAqC,uCACvC,OAAQA,EAAOC,MACb,KAAK/B,IACH,OAAO8B,EAAOM,SAChB,KAAKnC,IACH,MAAO,CACLgC,OAAQ,EACRC,SAAU,GACVC,SAAW,IAEf,QACE,OAAON,M,QCrBEQ,EADDC,sBAAYZ,EAAaa,iCCAnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASzB,OACL,kBAAC,IAAD,CAAUiB,MAAOA,GACb,kBAAC,EAAD,OAEFS,SAASC,eAAe,SD+HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.77492467.chunk.js","sourcesContent":["// 定义增加 state 类型常量\r\nexport const INCREMENT = \"INCREMENT\";\r\nexport type INCREMENT_TYPE = typeof INCREMENT;\r\n\r\n// 定义减少 state 类型常量\r\nexport const DECREMENT = \"DECREMENT\";\r\nexport type DECREMENT_TYPE = typeof DECREMENT;\r\n\r\n// 登录\r\nexport const LOGIN = \"LOGIN\"\r\nexport type LOGIN_TYPE = typeof LOGIN;\r\n\r\n//退出登录\r\nexport const LOGOUT = \"LOGOUT\"\r\nexport type LOGOUT_TYPE = typeof LOGOUT","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './loader.css'\r\n//通用的过场组件\r\nconst loadingComponent = () => {\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n    return (\r\n        // <CSSTransition\r\n        //     // in={this.state.show} // 如果this.state.show从false变为true，则动画入场，反之out出场\r\n        //     timeout={1000} //动画执行1秒\r\n        //     classNames='fade' //自定义的class名\r\n        //     unMountOnExit //可选，当动画出场后在页面上移除包裹的dom节点\r\n        // >\r\n        <div id=\"loader-wrapper\">\r\n            <div id=\"loader\"></div>\r\n            <div className=\"loader-section section-left\"></div>\r\n            <div className=\"loader-section section-right\"></div>\r\n            <div className=\"load_title\">Please waiting.....<br /><span>V1.0</span></div>\r\n        </div>\r\n        // </CSSTransition>\r\n\r\n\r\n        // <Spin indicator={antIcon} />\r\n        // <div>div</div>\r\n    )\r\n}\r\n\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport default (loader: any, loading = loadingComponent) => {\r\n    return Loadable({\r\n        loader,\r\n        loading\r\n    });\r\n}","import React from 'react';\r\nimport { renderRoutes, RouteConfig } from 'react-router-config';\r\nimport { Redirect } from 'react-router-dom'\r\n// import Blog from '../pages/blog';\r\nimport Loadable from './pageLodable'\r\n// import Admin from '../pages/admin';\r\n// import AdminLogin from '../pages/admin/login'\r\n// import Loadable from 'react-loadable';\r\n// import UserController from '../pages/admin/components/user/index';\r\n\r\n\r\nconst Blog = Loadable(() => import('../pages/blog'))\r\nconst ArticleDetail = Loadable(() => import('../pages/blog/articleDetail'))\r\nconst AuthorDetail = Loadable(() => import('../pages/blog/authorDetail'))\r\nconst AddArticle = Loadable(() => import('../pages/blog/writeArticle'))\r\nconst Favorites = Loadable(() => import('../pages/blog/favorites'))\r\n\r\nconst SystemData = Loadable(() => import('../pages/admin/components/systemData'))\r\nconst UserController = Loadable(() => import('../pages/admin/components/user/index'))\r\nconst ArticleController = Loadable(() => import('../pages/admin/components/article'))\r\nconst Admin = Loadable(() => import('../pages/admin'))\r\nconst AdminLogin = Loadable(() => import('../pages/admin/login'))\r\nconst router: RouteConfig[] = [\r\n    {\r\n        path: \"/\",\r\n        exact: true,\r\n        render: () => <Redirect to='/blog' />,\r\n    },\r\n    {\r\n        path: \"/blog\",\r\n        component: Blog,\r\n        // component: Blog,\r\n    },\r\n    {\r\n        path: \"/articleDetail/:id\",\r\n        component: ArticleDetail\r\n    },\r\n    {\r\n        path: '/addArticle',\r\n        component: AddArticle\r\n    },\r\n    {\r\n        path: '/favorites/:id',\r\n        component: Favorites\r\n    },\r\n    {\r\n        path: \"/authorDetail/:id\",\r\n        component: AuthorDetail,\r\n        // render: () => <Redirect to='/authorDetail/:id/articleList' />,\r\n\r\n        // children: [\r\n        //     {\r\n        //         path: '/authorDetail/1/articleList'\r\n        //     }\r\n        // ]\r\n    },\r\n    {\r\n        path: \"/admin\",\r\n        // exact: true,\r\n        component: Admin,\r\n        children: [\r\n            {\r\n                path: '/admin/systemData',\r\n                component: SystemData,\r\n            },\r\n            {\r\n                path: '/admin/userController',\r\n                component: UserController,\r\n            },\r\n            {\r\n                path: '/admin/ArticleController',\r\n                component: ArticleController,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: '/adminLogin',\r\n        component: AdminLogin,\r\n    }\r\n]\r\nexport default renderRoutes(router) ","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport router from './route'\r\n// import Count from './count';\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {router}\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ModifyAction } from '../actions';\r\nimport { DECREMENT, INCREMENT, LOGOUT, LOGIN } from '../actionTypes';\r\nimport { combineReducers } from 'redux'\r\nimport { ILoginInfo } from '../../pages/blog/types';\r\n\r\n// 处理并返回 state \r\nlet count = (state = 0, action: ModifyAction): number => {\r\n    switch (action.type) {\r\n      case INCREMENT:\r\n        return state + 1\r\n      case DECREMENT:\r\n        return state - 1\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nlet isLogin = (\r\n  state = {\r\n        userId: 0,\r\n        userIcon: '',\r\n        username : ''\r\n}\r\n  , action: ModifyAction): ILoginInfo => {\r\n  switch (action.type) {\r\n    case LOGIN:\r\n      return action.userInfo;\r\n    case LOGOUT:\r\n      return {\r\n        userId: 0,\r\n        userIcon: '',\r\n        username : ''\r\n      };\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  countReducer: count,\r\n  loginReducer: isLogin\r\n})\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n// export default (state = 0, action: ModifyAction): number => {\r\n//     switch (action.type) {\r\n//       case INCREMENT:\r\n//         return state + 1\r\n//       case DECREMENT:\r\n//         return state - 1\r\n//       default:\r\n//         return state\r\n//     }\r\n// }","import { createStore } from 'redux';\r\nimport rootReducer  from './reducers';\r\n\r\n// 安装redux-devtools-extension的可视化工具。需去谷歌商店安装Redux-DevTools\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// const StoreConfig=() => {\r\n//     return createStore(\r\n//         rootReducer,\r\n//         composeWithDevTools()\r\n//     );\r\n// }\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\";\r\nimport store from './store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}